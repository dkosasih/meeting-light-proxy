// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"crypto/tls"
	"github.com/dkosasih/meeting-light-proxy/albums"
	"github.com/dkosasih/meeting-light-proxy/interfaces"
	"github.com/dkosasih/meeting-light-proxy/middlewares"
	"github.com/dkosasih/meeting-light-proxy/openhab"
	"github.com/gin-gonic/gin"
	"net/http"
)

// Injectors from wire.go:

func InitialiseProviders() *App {
	engine := NewRouter()
	albumHandlerFactory := albums.NewAlbumHandlerFactory()
	endpoints := albums.NewEndpoints(engine, albumHandlerFactory)
	client := NewHttpClient()
	openhabHandlerFactory := openhab.NewOpenhabHandlerFactory(client)
	openhabEndpoints := openhab.NewEndpoints(engine, openhabHandlerFactory)
	v := ProvideEndpoints(endpoints, openhabEndpoints)
	app := &App{
		Router:    engine,
		Endpoints: v,
	}
	return app
}

// wire.go:

func NewHttpClient() *http.Client {
	httpClient := &http.Client{}

	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	httpClient.Transport = tr

	return httpClient
}

func NewRouter() *gin.Engine {
	router := gin.Default()
	router.Use(middlewares.ApiVersion())

	return router
}

func ProvideEndpoints(
	albumEp *albums.Endpoints,
	openHabEp *openhab.Endpoints) []interfaces.EndpointRegistrator {
	return []interfaces.EndpointRegistrator{albumEp, openHabEp}
}
